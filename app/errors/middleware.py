import logging
import uuid
import time
import traceback
from flask import request, g, current_app
from werkzeug.exceptions import HTTPException

logger = logging.getLogger("app.middleware")


class ErrorHandlingMiddleware:
    """Middleware for consistent request processing and error handling."""

    def __init__(self, app=None):
        self.app = app
        if app is not None:
            self.init_app(app)

    def init_app(self, app):
        """Initialize the middleware with a Flask application."""
        app.before_request(self.before_request)
        app.after_request(self.after_request)
        app.teardown_request(self.teardown_request)
        self.app = app

    def before_request(self):
        """Process the request before it's handled by the view."""
        g.request_id = str(uuid.uuid4())
        g.request_start_time = time.time()
        logger.info(f"Request {g.request_id} started: {request.method} {request.path}")
        g.context = {
            "request_id": g.request_id,
            "user_agent": request.headers.get("User-Agent", "Unknown"),
            "remote_addr": request.remote_addr,
        }

    def after_request(self, response):
        """Process the response after it's been generated by the view."""
        duration = time.time() - g.get("request_start_time", time.time())
        logger.info(
            f"Request {g.get('request_id', 'unknown')} completed: {request.method} {request.path} {response.status_code} in {duration:.2f}s"
        )
        response.headers.setdefault("X-Request-ID", g.get("request_id", "unknown"))
        return response

    def teardown_request(self, exception=None):
        """Handle any exceptions and clean up resources."""
        if exception:
            if isinstance(exception, HTTPException):
                return
            logger.error(
                f"Unhandled exception in request {g.get('request_id', 'unknown')}: {str(exception)}"
            )
            logger.error(traceback.format_exc())


def init_middleware(app):
    """Initialize the error handling middleware for the application."""
    middleware = ErrorHandlingMiddleware(app)
    return middleware
